name: Build Frontend and Deploy

on:
  push:
    tags:
      - '*'
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

jobs:
  build-and-deploy:
    # 除了 tags 发版会执行 ci 外，在 commit message 中包含 run-ci，也会执行 ci
    # 主要是为了在 tags 外执行一次 ci，缓存 node_modules 给 tags 共享
    # 因为各 tags 是无法共享 node_modules 的
    if: ${{
      github.event_name == 'push' &&
      (
      contains(github.event.head_commit.message, 'run-ci') ||
      startsWith(github.ref, 'refs/tags')
      )
      }}
    env:
      __PKG_NAME__: 'app-website'
      __PKG_VERSION_NUM__: '0.0.0'
      __PKG_VERSION_STR__: 'v0.0.0'

    # 只在推送到 main 分支或者 PR 合并到 main 分支时运行
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'
          cache-dependency-path: './yarn.lock'

      - name: 'Get Package Version'
        run: |
          PKG_VERSION=$(echo $(node ./.github/scripts/ci-get-pkg-version.js))
          echo $PKG_VERSION
          echo __PKG_VERSION_NUM__=$PKG_VERSION >> $GITHUB_ENV
          echo __PKG_VERSION_STR__=v$PKG_VERSION >> $GITHUB_ENV
          echo __PKG_BUILD_NAME__=build-v$PKG_VERSION >> $GITHUB_ENV

      - name: 安装依赖
        if: ${{ steps.STEP_CACHE.outputs.cache-hit != 'true' }}
        run: |
          cd packages/app-website
          yarn install --frozen-lockfile

      #
      # GEN .env
      # ---------------------------------------------------------
      - name: 'Gen All Github Secrets to `.env`'
        run: |
          echo "" > .env
          echo "---- DOTENV-PLACEHOLDER-S ----"
          echo SKIP_PREFLIGHT_CHECK=${{ secrets.SKIP_PREFLIGHT_CHECK }} >> .env
          echo GENERATE_SOURCEMAP=${{ secrets.GENERATE_SOURCEMAP }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo CODE_EDITOR=${{ secrets.CODE_EDITOR }} >> .env
          echo REACT_APP_NAME=${{ secrets.REACT_APP_NAME }} >> .env
          echo REACT_APP_PAGE_CNAME=${{ secrets.REACT_APP_PAGE_CNAME }} >> .env
          echo REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }} >> .env
          echo REACT_APP_CDN_URL=${{ secrets.REACT_APP_CDN_URL }} >> .env
          echo REACT_APP_UPLOAD_URL=${{ secrets.REACT_APP_UPLOAD_URL }} >> .env
          echo REACT_APP_ENABLE_AXIOS_CATCH_ERROR_MSG=${{ secrets.REACT_APP_ENABLE_AXIOS_CATCH_ERROR_MSG }} >> .env
          echo REACT_APP_ENABLE_DARK_THEME=${{ secrets.REACT_APP_ENABLE_DARK_THEME }} >> .env
          echo CI_CDN_ACCESS_KEY=${{ secrets.CI_CDN_ACCESS_KEY }} >> .env
          echo CI_CDN_SECRET_KEY=${{ secrets.CI_CDN_SECRET_KEY }} >> .env
          echo CI_CDN_BUCKET=${{ secrets.CI_CDN_BUCKET }} >> .env
          echo CI_GITHUB_TOKEN=${{ secrets.CI_GITHUB_TOKEN }} >> .env
          echo REACT_APP_DEBUG_BAR_PASSWORD_HASH=${{ secrets.REACT_APP_DEBUG_BAR_PASSWORD_HASH }} >> .env
          echo "---- DOTENV-PLACEHOLDER-E ----"
          cat .env
          mv .env packages/app-website/.env

      

      - name: 构建前端项目
        run: |
          cd packages/app-website
          yarn build

      - name: 验证构建产物
        run: |
          if [ ! -d "./packages/app-website/build" ]; then
            echo "构建失败：找不到 build 目录"
            exit 1
          fi
          echo "构建成功，产物大小："
          du -sh ./packages/app-website/build

      - name: 压缩构建产物
        run: |
          cd packages/app-website
          zip -r build.zip build/
          echo "✅ 构建产物已压缩"
          echo "压缩文件大小："
          ls -lh build.zip

          # 将压缩文件移动到根目录，避免传输时保留目录结构
          mv build.zip ../../${{ env.__PKG_BUILD_NAME__ }}.zip

      - name: 推送构建产物到远程服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: '${{ env.__PKG_BUILD_NAME__ }}.zip'
          target: '${{ secrets.REMOTE_TARGET_PATH }}'
          overwrite: true

      - name: 在远程服务器上部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ${{ secrets.REMOTE_TARGET_PATH }}

            echo "删除旧的 build 目录"
            rm -rf build

            echo "📦 解压构建产物..."
            unzip -o ${{ env.__PKG_BUILD_NAME__ }}.zip -d .


            echo "🐳 执行 Docker 重新构建脚本..."
            # 执行您在 VPS 上准备的脚本
            # 假设脚本名为 deploy.sh，请根据实际脚本名称修改
            if [ -f "deploy.sh" ]; then
              chmod +x deploy.sh
              ./deploy.sh           
            else
              echo "⚠️  未找到部署脚本，请确保脚本存在"
              echo "当前目录文件："
              ls -la
              exit 1
            fi           

            echo "✅ 部署完成！"

      - name: 部署成功通知
        if: success()
        run: |
          echo "🎉 部署成功！"
          echo "应用已部署到 http://${{ secrets.REMOTE_HOST }}"
          echo "Docker 容器正在运行，使用 Caddy 服务器提供 SPA 支持"

      - name: 部署失败通知
        if: failure()
        run: |
          echo "❌ 部署失败！请检查构建或网络连接。"
          echo "请查看上面的日志获取详细错误信息。"
